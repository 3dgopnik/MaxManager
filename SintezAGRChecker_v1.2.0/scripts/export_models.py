# bl_info = {
#     "name": "AGR Export Tools",
#     "description": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –∏–∑ AGR_checker",
#     "author": "computer_invaders",
#     "version": (1, 0, 0),
#     "blender": (4, 2, 0),
#     "location": "3D Viewport > Sidebar > AGR_export",
#     "category": "Import-Export"
# }

import bpy
import bmesh
from mathutils import Vector
import re
import os
import zipfile
import datetime
import shutil

from . import os_utils
from . import utills

class AGR_CollectionItem(bpy.types.PropertyGroup):
    """–≠–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    name: bpy.props.StringProperty(name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
    is_low_poly: bpy.props.BoolProperty(name="–ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–∞—è", default=False)
    is_light: bpy.props.BoolProperty(name="–°–≤–µ—Ç–æ–≤–∞—è", default=False)
    enabled: bpy.props.BoolProperty(name="–í–∫–ª—é—á–∏—Ç—å –≤ —ç–∫—Å–ø–æ—Ä—Ç", default=True)
    object_count: bpy.props.IntProperty(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤", default=0)
    material_count: bpy.props.IntProperty(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", default=0)
    texture_count: bpy.props.IntProperty(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç—É—Ä", default=0)
    triangle_count: bpy.props.IntProperty(name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤", default=0)

class AGR_ExportedFolder(bpy.types.PropertyGroup):
    """–ü–∞–ø–∫–∞ –∫—É–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å –∫–æ–ª–ª–µ–∫—Ü–∏—è"""
    folder_name: bpy.props.StringProperty(name="–ò–º—è –ø–∞–ø–∫–∏")
    collection_name: bpy.props.StringProperty(name="–ò–º—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

class AGR_CollectionSettings(bpy.types.PropertyGroup):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    collection_items: bpy.props.CollectionProperty(type=AGR_CollectionItem)
    collection_index: bpy.props.IntProperty(name="–ò–Ω–¥–µ–∫—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏", default=0)
    last_export_path: bpy.props.StringProperty(name="–ü—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞", default="")
    exported_folders: bpy.props.CollectionProperty(type=AGR_ExportedFolder)

    save_old_archives: bpy.props.BoolProperty(default=False,
                                              description="–ü—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–æ–¥–µ–ª–µ–π, –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã –≤ –ø–∞–ø–∫—É 'AGRChecker_export_saves' –∏ –≤ –ø–æ–¥–ø–∞–ø–∫–∏ –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Ä—É—á–Ω—É—é.")
    saves_size_info: bpy.props.StringProperty()

def exit_local_view():
    """–í—ã—Ö–æ–¥–∏—Ç –∏–∑ Local View –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω"""
    for area in bpy.context.screen.areas:
        if area.type == 'VIEW_3D':
            for space in area.spaces:
                if space.type == 'VIEW_3D':
                    if space.local_view:
                        with bpy.context.temp_override(area=area, space=space):
                            bpy.ops.view3d.localview(frame_selected=False)
                        print("üîì –í—ã—Ö–æ–¥ –∏–∑ Local View –≤—ã–ø–æ–ª–Ω–µ–Ω")
                        return True
    return False

LOW_POLY_SETTINGS = {
    'use_selection': False,
    'use_visible': False,
    'use_active_collection': False,
    'global_scale': 1.0,
    'apply_unit_scale': True,
    'apply_scale_options': 'FBX_SCALE_ALL',
    'use_space_transform': True,
    'bake_space_transform': False,
    'object_types': {'EMPTY', 'MESH', 'LIGHT'},
    'use_mesh_modifiers': True,
    'use_mesh_modifiers_render': True,
    'mesh_smooth_type': 'FACE',
    'colors_type': 'SRGB',
    'prioritize_active_color': False,
    'use_subsurf': False,
    'use_mesh_edges': False,
    'use_tspace': False,
    'use_triangles': True,
    'use_custom_props': False,
    'add_leaf_bones': False,
    'primary_bone_axis': 'Y',
    'secondary_bone_axis': 'X',
    'use_armature_deform_only': False,
    'armature_nodetype': 'NULL',
    'bake_anim': False,
    'bake_anim_use_all_bones': True,
    'bake_anim_use_nla_strips': True,
    'bake_anim_use_all_actions': True,
    'bake_anim_force_startend_keying': True,
    'bake_anim_step': 1.0,
    'bake_anim_simplify_factor': 1.0,
    'path_mode': 'COPY',
    'embed_textures': True,
    'batch_mode': 'OFF',
    'use_batch_own_dir': True,
    'axis_forward': '-Z',
    'axis_up': 'Y'
}

def is_low_poly_collection(collection_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ —á–µ—Ç—ã—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–º—É –∫–æ–¥—É –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏"""
    pattern = r'^\d{4}(?!\d)'
    return bool(re.match(pattern, collection_name))

def get_low_poly_collections():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
    low_poly_collections = []
    for collection in bpy.data.collections:
        if is_low_poly_collection(collection.name):
            low_poly_collections.append(collection)
    return low_poly_collections

def get_high_poly_export_folder(collection_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ high-poly –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–±–µ–∑ .fbx –∏ _Light)"""
    name = collection_name
    if name.endswith('_Light'):
        name = name[:-6]
    if name.lower().endswith('.fbx'):
        name = name[:-4]
    return name

def get_low_poly_export_folder(collection_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –Ω–∞—á–∞–ª–∞ –∏–º–µ–Ω–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è low-poly –ø–∞–ø–∫–∏"""
    import re
    match = re.match(r'^(\d{4})', collection_name)
    if match:
        return match.group(1)
    return 'lowpoly'

def is_light_collection(collection_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–≤–µ—Ç–æ–≤–æ–π (—Å–æ–¥–µ—Ä–∂–∏—Ç Light –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏)"""
    return '_Light' in collection_name or 'Light' in collection_name

def count_collection_stats(collection):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏: –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Ç–µ–∫—Å—Ç—É—Ä—ã, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏"""
    materials = set()
    textures = set()
    triangles = 0
    
    for obj in collection.objects:
        if obj.type == 'MESH' and obj.data:
            mesh = obj.data
            if mesh.loop_triangles:
                triangles += len(mesh.loop_triangles)
            elif mesh.polygons:
                triangles += len(mesh.polygons)
            
            for material_slot in obj.material_slots:
                if material_slot.material:
                    materials.add(material_slot.material)
                    
                    material = material_slot.material
                    if material.use_nodes and material.node_tree:
                        for node in material.node_tree.nodes:
                            if node.type == 'TEX_IMAGE' and node.image:
                                textures.add(node.image)
    
    return len(materials), len(textures), triangles

def update_collection_list(context):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"""
    settings = context.scene.agr_collection_settings
    settings.collection_items.clear()
    
    for collection in bpy.data.collections:
        if len(collection.objects) > 0:
            item = settings.collection_items.add()
            item.name = collection.name
            item.is_low_poly = is_low_poly_collection(collection.name)
            item.is_light = is_light_collection(collection.name)
            item.enabled = not utills.get_layer_collection_by_name(collection.name).exclude
            item.object_count = len(collection.objects)
            
            material_count, texture_count, triangle_count = count_collection_stats(collection)
            item.material_count = material_count
            item.texture_count = texture_count
            item.triangle_count = triangle_count
    
    print(f"–°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: {len(settings.collection_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

class AGR_OT_PackToZip(bpy.types.Operator):
    """–£–ø–∞–∫–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ZIP –∞—Ä—Ö–∏–≤—ã"""
    bl_idname = "agr.pack_to_zip"
    bl_label = "AGR: –£–ø–∞–∫–æ–≤–∞—Ç—å –≤ ZIP"
    bl_options = {'REGISTER', 'UNDO'}
    
    # @classmethod
    # def poll(cls, context):
    #     """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç –∏ –µ—Å—Ç—å –ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏"""
    #     settings = context.scene.agr_collection_settings
    #     return settings.last_export_path != "" and len(settings.exported_folders) > 0
    
    def execute(self, context):
        import os
        import zipfile
        
        settings = context.scene.agr_collection_settings
        source_directory = settings.last_export_path
        
        if not source_directory:
            self.report({'ERROR'}, "–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            return {'CANCELLED'}
        
        if not os.path.exists(source_directory):
            self.report({'ERROR'}, f"–ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {source_directory}")
            return {'CANCELLED'}
        
        # source_directory = os_utils._get_project_path()
        if settings.save_old_archives:
            export_dir = os_utils.get_export_dir()
            # subdirectories = [name for name in os.listdir(export_dir) if os.path.isdir(os.path.join(export_dir, name))]
            # if subdirectories:
            #     pass
            dt = datetime.datetime.now()
            day = str(dt.day).rjust(2, "0")
            month = str(dt.month).rjust(2, "0")
            hour = str(dt.hour).rjust(2, "0")
            minute = str(dt.minute).rjust(2, "0")
            sec = str(dt.second).rjust(2, "0")
            subdir_name = f"{dt.year}{month}{day}_{hour}_{minute}_{sec}"
            subdir_path = os.path.join(export_dir, subdir_name)
            os.mkdir(subdir_path)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤: {subdir_path}")

            for exported_folder in settings.exported_folders:
                item_name = exported_folder.folder_name
                item_path = os.path.join(source_directory, item_name)
                
                zip_filename = f"{item_name}.zip"
                zip_old_path = os.path.join(os_utils._get_project_path(), zip_filename)
                zip_new_path = os.path.join(subdir_path, zip_filename)

                shutil.move(zip_old_path, zip_new_path)
                print(f"üìÅ –ê—Ä—Ö–∏–≤ {zip_filename} –ø–µ—Ä–µ–º–µ—â–µ–Ω: {zip_new_path}")

            files_size_all = 0
            for root, dirs, files in os.walk(export_dir):
                for file in files:
                    file_size = os.path.getsize(os.path.join(root, file))
                    files_size_all += file_size
            settings.saves_size_info = f"{round(files_size_all / 1048576)} Mb"
        else:
            pass

        # new_directory = os.path.join(source_directory, "new")
        new_directory = source_directory
        if not os.path.exists(new_directory):
            try:
                os.makedirs(new_directory)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤: {new_directory}")
            except Exception as e:
                self.report({'ERROR'}, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É 'new': {e}")
                return {'CANCELLED'}
        
        print(f"\nüì¶ –ù–∞—á–∏–Ω–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ ZIP –∞—Ä—Ö–∏–≤—ã")
        print(f"üìç –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {source_directory}")
        print(f"üìç –ü–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤: {new_directory}")
        
        created_archives = 0
        skipped_items = 0
        
        try:
            if not settings.exported_folders:
                self.report({'WARNING'}, "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–Ω–æ–≤–æ.")
                return {'CANCELLED'}
            
            for exported_folder in settings.exported_folders:
                item_name = exported_folder.folder_name
                item_path = os.path.join(source_directory, item_name)
                
                if not os.path.exists(item_path) or not os.path.isdir(item_path):
                    print(f"‚ö†Ô∏è  –ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {item_name}")
                    skipped_items += 1
                    continue
                
                files_in_folder = []
                for root, dirs, files in os.walk(item_path):
                    files_in_folder.extend(files)
                
                if not files_in_folder:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é –ø–∞–ø–∫—É: {item_name}")
                    skipped_items += 1
                    continue
                
                zip_filename = f"{item_name}.zip"
                zip_path = os.path.join(new_directory, zip_filename)
                
                print(f"\nüì¶ –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤: {zip_filename}")
                print(f"   üìÇ –ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫: {item_name}")
                print(f"   üéØ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {exported_folder.collection_name}")
                print(f"   üìÑ –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(files_in_folder)}")
                
                try:
                    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                        for root, dirs, files in os.walk(item_path):
                            for file in files:
                                file_path = os.path.join(root, file)
                                arc_path = os.path.relpath(file_path, item_path)
                                zipf.write(file_path, arc_path)
                                print(f"     ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {arc_path}")
                    
                    created_archives += 1
                    print(f"   üíæ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_path}")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ {zip_filename}: {e}")
                    self.report({'WARNING'}, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ {zip_filename}: {e}")
                    continue
        
        except Exception as e:
            self.report({'ERROR'}, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ: {e}")
            return {'CANCELLED'}
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        message = f"–°–æ–∑–¥–∞–Ω–æ –∞—Ä—Ö–∏–≤–æ–≤: {created_archives}"
        if skipped_items > 0:
            message += f", –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–∞–ø–æ–∫: {skipped_items}"
        
        if created_archives > 0:
            self.report({'INFO'}, f"{message}")
            print(f"\n‚úÖ {message}")
            print(f"üìÅ –ê—Ä—Ö–∏–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {new_directory}")
            
            total_collections = sum(len(folder.collection_name.split(", ")) for folder in settings.exported_folders)
            print(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏:")
            print(f"   üì¶ ZIP –∞—Ä—Ö–∏–≤–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {created_archives}")
            print(f"   üéØ –ö–æ–ª–ª–µ–∫—Ü–∏–π —É–ø–∞–∫–æ–≤–∞–Ω–æ: {total_collections}")
            print(f"   üìÅ –ü–∞–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(settings.exported_folders)}")
        else:
            self.report({'WARNING'}, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞")
        
        return {'FINISHED'}

def temporarily_clean_names_in_collection(collection):
    """–í—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç —Å—É—Ñ—Ñ–∏–∫—Å–∞ .001 –≤ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    name_mapping = {
        'objects': {},
        'materials': {},
        'displaced_objects': {},
        'displaced_materials': {}
    }
    
    print(f"üîß –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection.name}")
    
    for obj in collection.objects:
        if obj.name.endswith('.001'):
            original_name = obj.name[:-4]
            
            if original_name not in bpy.data.objects:
                old_name = obj.name
                obj.name = original_name
                name_mapping['objects'][old_name] = original_name
                print(f"   üìù –û–±—ä–µ–∫—Ç: {old_name} -> {original_name}")
            else:
                existing_obj = bpy.data.objects[original_name]
                existing_in_lowpoly = any(is_low_poly_collection(col.name) for col in existing_obj.users_collection)
                
                if not existing_in_lowpoly:
                    import uuid
                    temp_name = f"_TEMP_{uuid.uuid4().hex[:8]}_{original_name}"
                    existing_obj.name = temp_name
                    name_mapping['displaced_objects'][original_name] = temp_name
                    print(f"   üîÑ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {original_name} -> {temp_name}")
                    
                    old_name = obj.name
                    obj.name = original_name
                    name_mapping['objects'][old_name] = original_name
                    print(f"   üìù –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: {old_name} -> {original_name}")
        
        if obj.data and hasattr(obj.data, 'materials'):
            for material_slot in obj.material_slots:
                if material_slot.material and material_slot.material.name.endswith('.001'):
                    material = material_slot.material
                    original_name = material.name[:-4]
                    
                    if original_name not in bpy.data.materials:
                        old_name = material.name
                        material.name = original_name
                        name_mapping['materials'][old_name] = original_name
                        print(f"   üé® –ú–∞—Ç–µ—Ä–∏–∞–ª: {old_name} -> {original_name}")
                    else:
                        existing_material = bpy.data.materials[original_name]
                        used_in_lowpoly = False
                        
                        for obj_check in bpy.data.objects:
                            if obj_check.data and hasattr(obj_check.data, 'materials'):
                                for slot in obj_check.material_slots:
                                    if slot.material == existing_material:
                                        if any(is_low_poly_collection(col.name) for col in obj_check.users_collection):
                                            used_in_lowpoly = True
                                            break
                                if used_in_lowpoly:
                                    break
                        
                        if not used_in_lowpoly:
                            import uuid
                            temp_name = f"_TEMP_{uuid.uuid4().hex[:8]}_{original_name}"
                            existing_material.name = temp_name
                            name_mapping['displaced_materials'][original_name] = temp_name
                            print(f"   üîÑ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {original_name} -> {temp_name}")
                            
                            old_name = material.name
                            material.name = original_name
                            name_mapping['materials'][old_name] = original_name
                            print(f"   üé® –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {old_name} -> {original_name}")
    
    cleaned_objects = len(name_mapping['objects'])
    cleaned_materials = len(name_mapping['materials'])
    displaced_objects = len(name_mapping['displaced_objects'])
    displaced_materials = len(name_mapping['displaced_materials'])
    print(f"   ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–µ–Ω–æ: –æ–±—ä–µ–∫—Ç–æ–≤ {cleaned_objects}, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ {cleaned_materials}")
    print(f"   üîÑ –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: –æ–±—ä–µ–∫—Ç–æ–≤ {displaced_objects}, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ {displaced_materials}")
    
    return name_mapping

def restore_names_in_collection(collection, name_mapping):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    print(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection.name}")
    
    restored_objects = 0
    restored_materials = 0
    restored_displaced_objects = 0
    restored_displaced_materials = 0
    
    for obj in collection.objects:
        for old_name, new_name in name_mapping['objects'].items():
            if obj.name == new_name:
                obj.name = old_name
                restored_objects += 1
                print(f"   üìù –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: {new_name} -> {old_name}")
                break
    
    for old_name, new_name in name_mapping['materials'].items():
        if new_name in bpy.data.materials:
            material = bpy.data.materials[new_name]
            material.name = old_name
            restored_materials += 1
            print(f"   üé® –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {new_name} -> {old_name}")
    
    for original_name, temp_name in name_mapping['displaced_objects'].items():
        if temp_name in bpy.data.objects:
            obj = bpy.data.objects[temp_name]
            obj.name = original_name
            restored_displaced_objects += 1
            print(f"   üîÑ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç: {temp_name} -> {original_name}")
    
    for original_name, temp_name in name_mapping['displaced_materials'].items():
        if temp_name in bpy.data.materials:
            material = bpy.data.materials[temp_name]
            material.name = original_name
            restored_displaced_materials += 1
            print(f"   üîÑ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {temp_name} -> {original_name}")
    
    print(f"   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö: –æ–±—ä–µ–∫—Ç–æ–≤ {restored_objects}, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ {restored_materials}")
    print(f"   üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö: –æ–±—ä–µ–∫—Ç–æ–≤ {restored_displaced_objects}, –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ {restored_displaced_materials}")
    
    return restored_objects + restored_displaced_objects, restored_materials + restored_displaced_materials

class AGR_OT_ExportRun(bpy.types.Operator):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É"""
    bl_idname = "agr.export_run"
    bl_label = "AGR: –≠–∫—Å–ø–æ—Ä—Ç"
    bl_description = "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ fbx-—Ñ–∞–π–ª—ã –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ zip-–∞—Ä—Ö–∏–≤—ã. –ó–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –∏ –∞—Ä—Ö–∏–≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ. –ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –æ–ø—Ü–∏–∏ '–°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã' –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—Ç–∞—Ä—ã–µ –∞—Ä—Ö–∏–≤—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏ –ø–æ –¥–∞—Ç–µ. –î–ª—è –í–ü–ú –æ–±–Ω—É–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ—á–∏—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É."
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        exit_local_view()
        
        original_mode = context.mode
        
        if context.mode != 'OBJECT':
            bpy.ops.object.mode_set(mode='OBJECT')
        
        self.expand_all_collections()
        
        low_poly_collections = get_low_poly_collections()
        
        if low_poly_collections:
            print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(low_poly_collections)} –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
            print(f"üìù –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º –∫–∞–∂–¥–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        
        self.reset_object_origins(low_poly_collections)
        
        self.apply_rotations()
        
        self.clean_materials(low_poly_collections)
        
        self.purge_unused_data()
        
        self.setup_export_settings()
        
        update_collection_list(context)
        
        # self.report({'INFO'}, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


        bpy.ops.agr.export_collections()

        bpy.ops.agr.pack_to_zip()


        return {'FINISHED'}
    
    def expand_all_collections(self):
        """–†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Outliner"""
        def expand_collection(collection, layer_collection=None):
            collection.hide_select = False
            collection.hide_viewport = False
            if layer_collection:
                layer_collection.hide_viewport = False
                # layer_collection.exclude = False
                for area in bpy.context.screen.areas:
                    if area.type == 'OUTLINER':
                        with bpy.context.temp_override(area=area):
                            for obj in collection.objects:
                                obj.hide_select = False
                                obj.hide_viewport = False
                                obj.hide_set(False)
            
            for child in collection.children:
                child_layer = None
                if layer_collection:
                    for child_layer_coll in layer_collection.children:
                        if child_layer_coll.collection == child:
                            child_layer = child_layer_coll
                            break
                expand_collection(child, child_layer)
        
        expand_collection(bpy.context.scene.collection, bpy.context.view_layer.layer_collection)
        
        print("–í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã")
    
    def reset_object_origins(self, low_poly_collections):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ 0,0,0 (–∫—Ä–æ–º–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞ –∏ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)"""
        bpy.ops.object.select_all(action='DESELECT')
        
        low_poly_objects = set()
        for collection in low_poly_collections:
            for obj in collection.objects:
                low_poly_objects.add(obj)
        
        selected_count = 0
        for col in bpy.data.collections:
            layer_col = utills.get_layer_collection_by_name(col.name)
            if layer_col and not layer_col.exclude:
                for obj in col.objects:
                    if obj.type in ['MESH', 'EMPTY'] and obj not in low_poly_objects:
                        obj.select_set(True)
                        selected_count += 1
        # for obj in bpy.context.scene.objects:
        #     if obj.type in ['MESH', 'EMPTY'] and obj not in low_poly_objects:
        #         obj.select_set(True)
        #         selected_count += 1
        
        if bpy.context.selected_objects:
            bpy.ops.object.location_clear(clear_delta=False)
            print(f"–°–±—Ä–æ—à–µ–Ω—ã –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {selected_count} –æ–±—ä–µ–∫—Ç–æ–≤ (–ø—Ä–æ–ø—É—â–µ–Ω—ã –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ)")
        
        if low_poly_objects:
            print(f"üîí –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(low_poly_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π")
    
    def apply_rotations(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–æ—Ç–∞—Ü–∏—é –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–∫—Ä–æ–º–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–≤–µ—Ç–∞)"""
        bpy.ops.object.select_all(action='DESELECT')
        
        for col in bpy.data.collections:
            layer_col = utills.get_layer_collection_by_name(col.name)
            if layer_col and not layer_col.exclude:
                for obj in col.objects:
                    if obj.type != 'LIGHT':
                        obj.select_set(True)
        # for obj in bpy.context.scene.objects:
        #     if obj.type != 'LIGHT':
        #         obj.select_set(True)
        
        if bpy.context.selected_objects:
            bpy.ops.object.transform_apply(location=False, rotation=True, scale=False)
            print(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è {len(bpy.context.selected_objects)} –æ–±—ä–µ–∫—Ç–æ–≤")
    
    def clean_materials(self, low_poly_collections):
        """–û—á–∏—â–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ Principled BSDF –∏ Material Output (–∫—Ä–æ–º–µ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö)"""
        materials_cleaned = 0
        materials_skipped = 0
        
        low_poly_materials = set()
        for collection in low_poly_collections:
            for obj in collection.objects:
                if obj.data and hasattr(obj.data, 'materials'):
                    for material_slot in obj.material_slots:
                        if material_slot.material:
                            low_poly_materials.add(material_slot.material)
        
        for obj in bpy.data.objects:
            if obj.name.startswith("UCX_"):
                obj.data.materials.clear()

        for material in bpy.data.materials:
            if material in low_poly_materials:
                materials_skipped += 1
                continue
                
            if material.use_nodes and material.node_tree:
                nodes = material.node_tree.nodes
                links = material.node_tree.links
                
                principled_node = None
                output_node = None
                
                for node in nodes:
                    if node.type == 'BSDF_PRINCIPLED':
                        principled_node = node
                    elif node.type == 'OUTPUT_MATERIAL':
                        output_node = node
                
                if principled_node and output_node:
                    nodes_to_remove = []
                    for node in nodes:
                        if node != principled_node and node != output_node:
                            nodes_to_remove.append(node)
                    
                    for node in nodes_to_remove:
                        nodes.remove(node)
                    
                    links.clear()
                    if principled_node.outputs.get('BSDF') and output_node.inputs.get('Surface'):
                        links.new(principled_node.outputs['BSDF'], output_node.inputs['Surface'])
                    
                    materials_cleaned += 1
        
        print(f"–û—á–∏—â–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_cleaned}")
        if materials_skipped > 0:
            print(f"üîí –ü—Ä–æ–ø—É—â–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π: {materials_skipped}")
    
    def purge_unused_data(self):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        bpy.ops.outliner.orphans_purge(do_local_ids=True, do_linked_ids=True, do_recursive=True)
        print("–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    
    def setup_export_settings(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        print("\n" + "="*60)
        print("–ù–ê–°–¢–†–û–ô–ö–ê –≠–ö–°–ü–û–†–¢–ê –ö–û–õ–õ–ï–ö–¶–ò–ô")
        print("="*60)
        
        collections_count = len(bpy.data.collections)
        low_poly_collections = get_low_poly_collections()
        high_poly_collections = [col for col in bpy.data.collections if not is_low_poly_collection(col.name)]
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {collections_count}")
        print(f"  üîª –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö: {len(low_poly_collections)}")
        print(f"  üî∫ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã—Ö: {len(high_poly_collections)}")
        
        if collections_count == 0:
            print("‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return 0
        
        print("\nüìã –°–ü–ò–°–û–ö –ö–û–õ–õ–ï–ö–¶–ò–ô:")
        for i, collection in enumerate(bpy.data.collections, 1):
            obj_count = len(collection.objects)
            collection_type = "üîª LOW-POLY" if is_low_poly_collection(collection.name) else "üî∫ HIGH-POLY"
            print(f"  {i}. {collection.name} ({obj_count} –æ–±—ä–µ–∫—Ç–æ–≤) [{collection_type}]")
        
        print(f"\nüîç –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
        print(f"- –í–µ—Ä—Å–∏—è Blender: {bpy.app.version_string}")
        print(f"- –ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: ‚úÖ –î–∞")
        print(f"- –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ 4-–∑–Ω–∞—á–Ω–æ–º—É –∫–æ–¥—É –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏")
        
        print("\nüöÄ –≠–ö–°–ü–û–†–¢ –ö–û–õ–õ–ï–ö–¶–ò–ô:")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º' –≤ –ø–∞–Ω–µ–ª–∏ AGR")
        print("‚Ä¢ –í—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("‚Ä¢ –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ + –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π")
        
        print("\nüìñ –ù–ê–°–¢–†–û–ô–ö–ò FBX (–í–´–°–û–ö–û–ü–û–õ–ò–ì–û–ù–ê–õ–¨–ù–´–ï):")
        settings = [
            "Scale: 1.0",
            "Apply Unit Scale: ‚úÖ",
            "Apply Scale Options: FBX Scale All",
            "Forward Axis: -Z",
            "Up Axis: Y",
            "Object Types: Mesh, Light, Empty",
            "Apply Modifiers: ‚úÖ",
            "Smoothing: Face",
            "Triangulate Faces: ‚úÖ",
            "Embed Textures: ‚ùå"
        ]
        for setting in settings:
            print(f"  ‚Ä¢ {setting}")
        
        print("\nüìñ –ù–ê–°–¢–†–û–ô–ö–ò FBX (–ù–ò–ó–ö–û–ü–û–õ–ò–ì–û–ù–ê–õ–¨–ù–´–ï):")
        low_poly_settings = [
            "Scale: 1.0",
            "Apply Unit Scale: ‚úÖ",
            "Apply Scale Options: FBX Scale All",
            "Forward Axis: -Z",
            "Up Axis: Y",
            "Object Types: Mesh, Light, Empty",
            "Apply Modifiers: ‚úÖ",
            "Smoothing: Face",
            "Triangulate Faces: ‚úÖ",
            "Embed Textures: ‚úÖ",
            "Path Mode: COPY"
        ]
        for setting in low_poly_settings:
            print(f"  ‚Ä¢ {setting}")
        
        print("\n" + "="*60)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        print("üîß –ù–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        print("   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è –±—É–¥—É—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—á–∏—â–µ–Ω—ã –æ—Ç .001 –ø–µ—Ä–µ–¥ —ç–∫—Å–ø–æ—Ä—Ç–æ–º")
        print("   ‚Ä¢ –ü–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("="*60)
        
        return collections_count
    
    def find_layer_collection(self, layer_collection, collection_name):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç layer_collection –ø–æ –∏–º–µ–Ω–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        if layer_collection.collection.name == collection_name:
            return layer_collection
        for child in layer_collection.children:
            result = self.find_layer_collection(child, collection_name)
            if result:
                return result
        return None

class AGR_OT_ExportCollections(bpy.types.Operator):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏"""
    bl_idname = "agr.export_collections"
    bl_label = "AGR: –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        exit_local_view()
        
        if os_utils.check_models_path():
            export_directory = os_utils._get_project_path()
        # if self.filepath:
        #     export_directory = os.path.dirname(self.filepath)
        # elif self.directory:
        #     export_directory = self.directory
        else:
            self.report({'ERROR'}, "–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return {'CANCELLED'}
        
        import os
        
        if not os.path.exists(export_directory):
            try:
                os.makedirs(export_directory)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {export_directory}")
            except Exception as e:
                self.report({'ERROR'}, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: {e}")
                return {'CANCELLED'}
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ –ø–∞–ø–∫—É: {export_directory}")
        
        settings = context.scene.agr_collection_settings
        
        settings.last_export_path = export_directory
        
        settings.exported_folders.clear()
        
        enabled_collections = {}
        
        for item in settings.collection_items:
            if item.enabled:
                enabled_collections[item.name] = True
        
        if len(settings.collection_items) == 0:
            print("‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–π –ø—É—Å—Ç, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            for collection in bpy.data.collections:
                if len(collection.objects) > 0:
                    enabled_collections[collection.name] = True
        
        original_visibility = {}
        for collection in bpy.data.collections:
            original_visibility[collection.name] = collection.hide_viewport
        
        exported_count = 0
        skipped_count = 0
        
        try:
            for collection in bpy.data.collections:
                if len(collection.objects) == 0:
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection.name}")
                    continue
                
                if collection.name not in enabled_collections:
                    print(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection.name}")
                    skipped_count += 1
                    continue
                
                is_low_poly = is_low_poly_collection(collection.name)
                
                for col in bpy.data.collections:
                    col.hide_viewport = True

                collection.hide_viewport = False
                
                import os
                collection_name = collection.name
                if collection_name.lower().endswith('.fbx'):
                    collection_name = collection_name[:-4]
                
                safe_name = "".join(c for c in collection_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
                if not safe_name:
                    safe_name = f"collection_{exported_count + 1}"

                if is_low_poly:
                    export_subfolder = get_low_poly_export_folder(collection_name)
                    found_folder = None
                    for folder_name in os.listdir(export_directory):
                        folder_path = os.path.join(export_directory, folder_name)
                        if os.path.isdir(folder_path) and folder_name.startswith(export_subfolder):
                            found_folder = folder_path
                            break
                    if not found_folder:
                        print(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {export_subfolder}): {export_directory}. –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection.name} –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                        self.report({'WARNING'}, f"–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {export_subfolder}). –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection.name} –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                        skipped_count += 1
                        continue
                    export_path = found_folder
                else:
                    export_subfolder = get_high_poly_export_folder(collection_name)
                    export_path = os.path.join(export_directory, export_subfolder)
                    if not os.path.exists(export_path):
                        print(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {export_path}. –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection.name} –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                        self.report({'WARNING'}, f"–ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {export_subfolder}. –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection.name} –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                        skipped_count += 1
                        continue
                
                filepath = os.path.join(export_path, f"{safe_name}.fbx")
                
                print(f"\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection.name}")
                if is_low_poly:
                    print(f"   üîª –¢–∏–ø: –ù–ò–ó–ö–û–ü–û–õ–ò–ì–û–ù–ê–õ–¨–ù–ê–Ø")
                else:
                    print(f"   üî∫ –¢–∏–ø: –í–´–°–û–ö–û–ü–û–õ–ò–ì–û–ù–ê–õ–¨–ù–ê–Ø")
                if collection.name != collection_name:
                    print(f"   üîÑ –ò–º—è –æ—á–∏—â–µ–Ω–æ –æ—Ç .fbx: {collection_name}")
                print(f"   üìÑ –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {safe_name}.fbx")
                print(f"   üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {filepath}")
                print(f"   üìÇ –ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_path}")
                print(f"   üî¢ –û–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {len(collection.objects)}")
                
                try:
                    if is_low_poly:
                        collection_export_settings = LOW_POLY_SETTINGS.copy()
                        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∏–∑–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    else:
                        collection_export_settings = FBX_EXPORT_SETTINGS.copy()
                        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ–∫–æ–ø–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    
                    collection_export_settings['use_visible'] = True
                    
                    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
                    print(f"   ‚Ä¢ Scale: {collection_export_settings['global_scale']}")
                    print(f"   ‚Ä¢ Apply Unit Scale: {collection_export_settings['apply_unit_scale']}")
                    print(f"   ‚Ä¢ Apply Scale Options: {collection_export_settings['apply_scale_options']}")
                    print(f"   ‚Ä¢ Object Types: {collection_export_settings['object_types']}")
                    print(f"   ‚Ä¢ Apply Modifiers: {collection_export_settings['use_mesh_modifiers']}")
                    print(f"   ‚Ä¢ Triangulate: {collection_export_settings['use_triangles']}")
                    print(f"   ‚Ä¢ Axis Forward: {collection_export_settings['axis_forward']}")
                    print(f"   ‚Ä¢ Axis Up: {collection_export_settings['axis_up']}")
                    print(f"   ‚Ä¢ Use Visible: {collection_export_settings['use_visible']}")
                    if is_low_poly:
                        print(f"   ‚Ä¢ Embed Textures: {collection_export_settings['embed_textures']}")
                        print(f"   ‚Ä¢ Path Mode: {collection_export_settings['path_mode']}")
                    
                    name_mapping = None
                    if is_low_poly:
                        name_mapping = temporarily_clean_names_in_collection(collection)
                    
                    print(f"üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ FBX...")
                    bpy.ops.export_scene.fbx(
                        filepath=filepath,
                        **collection_export_settings
                    )
                    
                    if is_low_poly and name_mapping:
                        restore_names_in_collection(collection, name_mapping)
                    
                    exported_count += 1
                    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection.name} -> {safe_name}.fbx")
                    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {filepath}")
                    
                    folder_name = os.path.basename(export_path)
                    
                    folder_exists = False
                    for existing_folder in settings.exported_folders:
                        if existing_folder.folder_name == folder_name:
                            folder_exists = True
                            if collection.name not in existing_folder.collection_name:
                                existing_folder.collection_name += f", {collection.name}"
                            break
                    
                    if not folder_exists:
                        exported_folder = settings.exported_folders.add()
                        exported_folder.folder_name = folder_name
                        exported_folder.collection_name = collection.name
                        print(f"   üìÅ –ù–æ–≤–∞—è –ø–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏: {folder_name}")
                    else:
                        print(f"   üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É: {folder_name}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {collection.name}: {e}")
                    self.report({'WARNING'}, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {collection.name}: {e}")
                    skipped_count += 1
                    
                    if is_low_poly and 'name_mapping' in locals() and name_mapping:
                        try:
                            restore_names_in_collection(collection, name_mapping)
                        except Exception as restore_error:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π: {restore_error}")
        
        finally:
            for collection in bpy.data.collections:
                if collection.name in original_visibility:
                    collection.hide_viewport = original_visibility[collection.name]
        
        message = f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {exported_count} –∫–æ–ª–ª–µ–∫—Ü–∏–π –≤ {len(settings.exported_folders)} –ø–∞–ø–æ–∫"
        if skipped_count > 0:
            message += f", –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count}"
        message += f" –≤ {export_directory}"
        
        if exported_count > 0:
            # self.report({'INFO'}, message)
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:")
            print(f"   ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–π —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {exported_count}")
            print(f"   üìÅ –ü–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–æ/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(settings.exported_folders)}")
            print(f"   üéØ –ì–æ—Ç–æ–≤–æ –∫ —É–ø–∞–∫–æ–≤–∫–µ –≤ ZIP: {len(settings.exported_folders)} –ø–∞–ø–æ–∫")
        else:
            self.report({'WARNING'}, "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
        
        return {'FINISHED'}
    
    # def invoke(self, context, event):
    #     import os
    #     if not self.filepath:
    #         blend_filepath = bpy.data.filepath
    #         if blend_filepath:
    #             base_dir = os.path.dirname(blend_filepath)
    #             self.filepath = os.path.join(base_dir, "collections_export.fbx")
    #         else:
    #             desktop = os.path.expanduser("~/Desktop")
    #             self.filepath = os.path.join(desktop, "collections_export.fbx")
        
    #     context.window_manager.fileselect_add(self)
    #     return {'RUNNING_MODAL'}


def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    bpy.utils.register_class(AGR_CollectionItem)
    bpy.utils.register_class(AGR_ExportedFolder)
    bpy.utils.register_class(AGR_CollectionSettings)
    bpy.utils.register_class(AGR_OT_ExportRun)
    bpy.utils.register_class(AGR_OT_ExportCollections)
    # bpy.utils.register_class(AGR_PT_ExportPanel)
    # bpy.utils.register_class(AGR_OT_UpdateCollectionList)
    # bpy.utils.register_class(AGR_OT_EnableAllCollections)
    # bpy.utils.register_class(AGR_OT_DisableAllCollections)
    bpy.utils.register_class(AGR_OT_PackToZip)
    
    bpy.types.Scene.agr_collection_settings = bpy.props.PointerProperty(type=AGR_CollectionSettings)
    
    # bpy.types.VIEW3D_MT_object.append(menu_func_prepare)

def unregister():
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # bpy.types.VIEW3D_MT_object.remove(menu_func_prepare)
    
    if hasattr(bpy.types.Scene, 'agr_collection_settings'):
        del bpy.types.Scene.agr_collection_settings
    
    # bpy.utils.unregister_class(AGR_PT_ExportPanel)
    bpy.utils.unregister_class(AGR_OT_ExportCollections)
    bpy.utils.unregister_class(AGR_OT_ExportRun)
    # bpy.utils.unregister_class(AGR_OT_UpdateCollectionList)
    # bpy.utils.unregister_class(AGR_OT_EnableAllCollections)
    # bpy.utils.unregister_class(AGR_OT_DisableAllCollections)
    bpy.utils.unregister_class(AGR_OT_PackToZip)
    bpy.utils.unregister_class(AGR_CollectionSettings)
    bpy.utils.unregister_class(AGR_ExportedFolder)
    bpy.utils.unregister_class(AGR_CollectionItem)

FBX_EXPORT_SETTINGS = {
    'use_selection': False,
    'use_visible': False,
    'use_active_collection': False,
    'global_scale': 1.0,
    'apply_unit_scale': True,
    'apply_scale_options': 'FBX_SCALE_ALL',
    'use_space_transform': True,
    'bake_space_transform': False,
    'object_types': {'LIGHT', 'MESH', 'EMPTY'},
    'use_mesh_modifiers': True,
    'use_mesh_modifiers_render': True,
    'mesh_smooth_type': 'FACE',
    'colors_type': 'SRGB',
    'prioritize_active_color': False,
    'use_subsurf': False,
    'use_mesh_edges': False,
    'use_tspace': False,
    'use_triangles': True,
    'use_custom_props': False,
    'add_leaf_bones': False,
    'primary_bone_axis': 'Y',
    'secondary_bone_axis': 'X',
    'use_armature_deform_only': False,
    'armature_nodetype': 'NULL',
    'bake_anim': False,
    'bake_anim_use_all_bones': True,
    'bake_anim_use_nla_strips': True,
    'bake_anim_use_all_actions': True,
    'bake_anim_force_startend_keying': True,
    'bake_anim_step': 1.0,
    'bake_anim_simplify_factor': 1.0,
    'path_mode': 'AUTO',
    'embed_textures': False,
    'batch_mode': 'OFF',
    'use_batch_own_dir': True,
    'axis_forward': '-Z',
    'axis_up': 'Y'
}

# if __name__ == "__main__":
#     register()
