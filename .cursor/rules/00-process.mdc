---
# Процесс MaxManager (дополнено)

## Планы, идеи и артефакты примеров
- Планы: `docs/plans/*.md`, идеи: `docs/ideas.md`. Привязка к Issue обязательна.
- Примеры/наработки: `docs/samples/**`, внешние заготовки: `resources/imports/**`.
- Всё из `docs/samples/**` и `resources/imports/**` добавлено в `.gitignore` и не попадает в GitHub.
- Changelog ведём в `docs/changelog.md`. Текущая версия: v0.0.1.

alwaysApply: true
---
## Правила и документация
- Все изменения отражать в /docs (changelog, tasktracker, project).
- Историю изменений хранить в git; не удалять правила.
- При изменении процесса — обновлять правила.

## Рабочий процесс
- **ОБНОВЛЕНО**: В одном чате может быть несколько задач.
- **КРИТИЧНО**: Каждая задача-правка-изменения кода-документации = Issue в GitHub.
- **ЛОГИКА**: Если в одном чате - скорее всего один и тот же Issue.
- **ПЕРЕХОД**: Если кардинально другая задача - рекомендовать новый Issue и новый чат.
- **СОЗДАНИЕ ЧАТА**: Если AI может - создать чат сам, если не может - передать контекст для нового чата.
- **ТУПИК**: Когда AI начинает тупить - записать это структурно в правила и передать контекст в новый чат.
- **ПРАВИЛО**: Issue закрывается ТОЛЬКО после явного разрешения пользователя.
- **ИНСТРУМЕНТ**: Все операции с GitHub — исключительно через MCP GitHub tools.
- **РЕПОЗИТОРИЙ**: GitHub репозиторий: `https://github.com/3dgopnik/MaxManager`
- **ВЕТКИ**: Работа только в main, ветки создавать только для особо важных дел
- **ИСКЛЮЧЕНИЕ**: Issue НЕ создается для:
  - Обновления правил процесса (.cursor/rules/*)
  - Мета-задач по настройке инструментов
  - Административных изменений не связанных с кодом репозитория
- Перед началом каждого шага — запрос подтверждения.
- После шага — краткое резюме ≤ 5 пунктов и, при неоднозначности, 2–3 альтернативы.
- Периодически напоминать о статусе и оставшихся шагах.

## GitHub Issues (ОБЯЗАТЕЛЬНО)
- **СОЗДАНИЕ**: Каждая задача-правка-изменения начинается с создания Issue через `mcp_github_create_issue`.
- **МУЛЬТИЗАДАЧИ**: В одном чате может быть несколько задач, но каждая правка = отдельный Issue.
- **КОНТЕКСТ**: Если AI не может создать Issue - передать полный контекст для создания Issue.
- **ОБНОВЛЕНИЕ**: Все шаги и прогресс фиксируются в комментариях через `mcp_github_add_issue_comment`.
- **ЗАКРЫТИЕ**: Issue закрывается ТОЛЬКО после явного разрешения пользователя через `mcp_github_update_issue`.
- **MCP ТОЛЬКО**: Никаких ручных операций с GitHub — только через MCP tools.
- **СВЯЗКА**: PR обязательно привязывается к Issue через "Closes #номер".
- **ИСКЛЮЧЕНИЯ**: Issue НЕ создается для мета-задач (правила, настройки, админ).

## Git Workflow (ОБЯЗАТЕЛЬНО)
- **ЛОКАЛЬНЫЕ КОММИТЫ**: Исправления фиксировать через `git commit` ЛОКАЛЬНО
- **БЕЗ АВТОПУША**: ЗАПРЕЩЕНО делать `git push` сразу после commit
- **ТЕСТИРОВАНИЕ ПЕРВЫМ**: Пользователь ОБЯЗАН протестировать изменения ДО push
- **ИТЕРАТИВНЫЕ ФИКСЫ**: Находим баги → исправляем локально → commit → снова тестируем
- **ФИНАЛЬНЫЙ PUSH**: ТОЛЬКО после успешного тестирования и явного разрешения пользователя
- **ОДИН КОММЕНТАРИЙ**: Один финальный комментарий в Issue с полным результатом всех изменений
- **ЧИСТАЯ ИСТОРИЯ**: Избегать мусорных коммитов "fix typo", "oops forgot" - использовать `git commit --amend` или squash
- **ЗАКРЫТИЕ**: Issue закрывается после финального push и подтверждения пользователя

## Инструкции для проверки изменений

### Обязателен детальный план тестирования (каждой задачи)
- Что открыть: список шагов (приложения, файлы, окна).
- Как включить: команды запуска, где лежит скрипт/бинарь, переменные окружения.
- Что установить: явные зависимости (версии), где взять, как проверить установку.
- Что нажать: последовательность действий в UI.
- Ожидаемый результат: что должно измениться/появиться.
- Диагностика: где смотреть логи, как собрать отладочную информацию.

### Авто‑деплой скриптов для теста (3ds Max)
- MaxScript/плагины можно автоматически копировать в пользовательскую папку 3ds Max при сборке/запуске.
- Стандартный путь: `%USERPROFILE%/AppData/Local/Autodesk/3dsMax/<YEAR> - 64bit/Scripts/MaxManager/`.
- Версия скрипта должна быть указана в заголовке файла; при обновлении — перезаписываем.
- Тестер (пользователь) запускает готовый макрос из категории `MaxManager` и комментирует результат.

После каждого изменения AI должен давать пользователю конкретные шаги для проверки:
1. **Что изменилось** - краткое описание изменений
2. **Как проверить** - конкретные действия пользователя
3. **Ожидаемый результат** - что должно произойти
4. **Готовность к тестированию** - предложение протестировать прямо сейчас

## Идеи на будущее
После завершения задачи AI должен предлагать 1-2 идеи для дальнейшего развития:
1. **Краткое описание идеи** - что можно улучшить или добавить
2. **Оценка приоритета** - от 0.0 до 1.0 (например: 0.6)
3. **Обоснование** - почему эта идея важна
4. **Документирование** - фиксация в ROADMAP.md или отдельном файле идей

## Качество
- Придерживаться SOLID, KISS, DRY.
- Не оставлять неиспользуемый код и комментарии.
- Единый стиль: Ruff + Ruff format, Mypy (strict-ish), Pre-commit hooks.

## Code Review (обязательный чек-лист)
- [ ] **Issue создан** и все шаги зафиксированы в комментариях.
- [ ] Обновлены /docs до и после изменений.
- [ ] Полные type hints и docstrings.
- [ ] Валидация входов, обработка ошибок.
- [ ] Ruff/Mypy/Pre-commit зелёные.
- [ ] Тесты покрывают happy/edge.
- [ ] Нет мёртвого кода/дубликатов.
- [ ] **Issue закрыт** только после разрешения пользователя.

## Документация: форматы

### /docs/changelog.md:
```markdown
## [YYYY-MM-DD] - Краткое описание изменений

### Добавлено
* ...

### Изменено
* ...

### Исправлено
* ...
```

### /docs/tasktracker.md:
```markdown
## Задача: [Название задачи]

* **Статус**: [Не начата/В процессе/Завершена]
* **Описание**: [Детальное описание]
* **Шаги выполнения**:
  * [x] Завершенный шаг
  * [ ] Текущий шаг
  * [ ] Запланированный шаг
* **Зависимости**: [...]
```